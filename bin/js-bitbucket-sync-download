#!/usr/bin/env python3

import os
from subprocess import call

import logging
from typing import Dict

from dotenv import load_dotenv

import requests
from requests.auth import HTTPBasicAuth
from time import sleep

logger = logging.getLogger(__name__)


def nice_sleep():
    sleep(int(os.environ.get("NICE_SLEEP")) / 1000)


def all_repos():
    logger.info("All repos: Running")
    username = os.environ.get("BITBUCKET_USER")
    password = os.environ.get("BITBUCKET_PASS")
    team = os.environ.get("BITBUCKET_TEAM")

    full_repo_list = []

    # Request 100 repositories per page (and only their slugs), and the next page URL
    next_page_url = f"https://api.bitbucket.org/2.0/repositories/{team}?pagelen=100&fields=next,values.links.clone.href,values.slug"

    # Keep fetching pages while there's a page to fetch
    while next_page_url is not None:
        response = requests.get(next_page_url, auth=HTTPBasicAuth(username, password))
        page_json = response.json()

        # Parse repositories from the JSON
        for repo in page_json['values']:
            cloner: Dict[str]
            for cloner in repo['links']['clone']:
                if not cloner["href"].startswith("git@"):
                    continue
                git_clone = cloner["href"]
                logger.info(f"All repos: Found repo {git_clone}")
                full_repo_list.append(git_clone)

        # Get the next page URL, if present
        # It will include same query parameters, so no need to append them again
        next_page_url = page_json.get('next', None)
        logger.info(f"All repos: Next page")
        nice_sleep()

    logger.info(f"All repos: Found {len(full_repo_list)} repo(s)")

    return full_repo_list


def clone_repo(clone_url: str):
    nice_sleep()
    logging.info(f"Cloning '{clone_url}'")
    my_env = os.environ.copy()
    my_env["SKIP_ID_OPEN"] = "yes"
    call(["js-git-clone", clone_url], env=my_env)


def main():
    dir_home = os.environ.get('HOME')
    project_dir = os.path.realpath(os.path.dirname(os.path.realpath(__file__)) + "/..")
    load_dotenv(dotenv_path=f"{project_dir}/.env")

    logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))
    logger.info(f"Home dir of '{dir_home}' and project dir or '{project_dir}'")

    repos = all_repos()
    for repo in repos:
        clone_repo(repo)

    logging.info(f"Done!")


if __name__ == '__main__':
    main()
